// Apex AI - NSE Trading Competition Platform
// Database Schema for LLM Trading Models

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model - Represents each LLM trader
model Model {
  id            String       @id @default(cuid())
  name          String       @unique // "AlphaWhale"
  displayName   String       // "Alpha Whale"
  provider      LLMProvider  // GEMINI_PRO, GPT4, CLAUDE_SONNET
  logo          String?      // URL to logo
  isActive      Boolean      @default(true)
  
  portfolio     Portfolio?
  trades        Trade[]
  decisions     DecisionLog[]
  config        ModelConfig?
  backtestResults BacktestRunModel[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum LLMProvider {
  GEMINI_PRO
  GEMINI_FLASH
  GPT4
  GPT4_TURBO
  CLAUDE_SONNET
  CLAUDE_OPUS
  OPENROUTER_CLAUDE
  OPENROUTER_GPT4
  OPENROUTER_GEMINI
  OPENROUTER_LLAMA
  OPENROUTER_MISTRAL
  OPENROUTER_MINIMAX
  OPENROUTER_GEMINI_25_PRO
  OPENROUTER_DEEPSEEK
}

// Portfolio - Current holdings and cash
model Portfolio {
  id            String     @id @default(cuid())
  modelId       String     @unique
  model         Model      @relation(fields: [modelId], references: [id])
  
  cashBalance   Decimal    @default(100000) @db.Decimal(15, 2)
  initialValue  Decimal    @default(100000) @db.Decimal(15, 2)
  
  positions     Position[]
  history       PortfolioSnapshot[]
  
  updatedAt     DateTime   @updatedAt
}

// Position - Individual stock holdings
model Position {
  id            String     @id @default(cuid())
  portfolioId   String
  portfolio     Portfolio  @relation(fields: [portfolioId], references: [id])
  
  ticker        String
  shares        Int
  avgCost       Decimal    @db.Decimal(15, 2)
  
  @@unique([portfolioId, ticker])
}

// Trade - Transaction history
model Trade {
  id            String      @id @default(cuid())
  modelId       String
  model         Model       @relation(fields: [modelId], references: [id])
  backtestRunId String?
  backtestRun   BacktestRun? @relation(fields: [backtestRunId], references: [id])

  ticker        String
  action        TradeAction // BUY, SELL
  shares        Int
  price         Decimal     @db.Decimal(15, 2)
  totalValue    Decimal     @db.Decimal(15, 2)
  cashAfter     Decimal?    @db.Decimal(15, 2)
  portfolioValueAfter Decimal? @db.Decimal(15, 2)
  portfolioState Json?

  status        TradeStatus @default(PENDING)
  brokerOrderId String?

  createdAt     DateTime    @default(now())
  executedAt    DateTime?

  @@index([modelId, createdAt])
  @@index([backtestRunId, createdAt])
}

enum TradeAction {
  BUY
  SELL
}

enum TradeStatus {
  PENDING
  FILLED
  REJECTED
  CANCELLED
}

// DecisionLog - LLM reasoning
model DecisionLog {
  id              String     @id @default(cuid())
  modelId         String
  model           Model      @relation(fields: [modelId], references: [id])
  backtestRunId   String?
  backtestRun     BacktestRun? @relation(fields: [backtestRunId], references: [id])

  reasoning       String     @db.Text
  rawResponse     String     @db.Text
  promptTokens    Int?
  responseTokens  Int?
  
  tradeId         String?

  createdAt       DateTime   @default(now())

  @@index([modelId, createdAt])
  @@index([backtestRunId, createdAt])
}

// PortfolioSnapshot - Historical valuations
model PortfolioSnapshot {
  id              String     @id @default(cuid())
  portfolioId     String
  portfolio       Portfolio  @relation(fields: [portfolioId], references: [id])
  backtestRunId   String?
  backtestRun     BacktestRun? @relation(fields: [backtestRunId], references: [id])

  totalValue      Decimal    @db.Decimal(15, 2)
  cashBalance     Decimal    @db.Decimal(15, 2)
  positionsValue  Decimal    @db.Decimal(15, 2)
  returnPct       Decimal    @db.Decimal(10, 4)
  
  timestamp       DateTime   @default(now())

  @@index([portfolioId, timestamp])
  @@index([backtestRunId, timestamp])
}

// ModelConfig - Versioned prompt configurations
model ModelConfig {
  id              String     @id @default(cuid())
  modelId         String     @unique
  model           Model      @relation(fields: [modelId], references: [id])
  
  systemPrompt    String     @db.Text
  temperature     Decimal    @default(0.7) @db.Decimal(3, 2)
  maxTokens       Int        @default(1000)
  
  // Risk limits
  maxPositionSize Decimal    @default(0.3) @db.Decimal(3, 2)
  maxTradesPerDay Int        @default(10)
  watchlist       String[]   // Array of NSE tickers
  
  version         Int        @default(1)
  updatedAt       DateTime   @updatedAt
}

// MarketData - Cached price data
model MarketData {
  ticker          String
  price           Decimal    @db.Decimal(15, 2)
  change          Decimal    @db.Decimal(15, 2)
  changePct       Decimal    @db.Decimal(10, 4)
  volume          BigInt
  timestamp       DateTime
  
  @@id([ticker, timestamp])
  @@index([ticker])
}

// SystemLog - Operational monitoring
model SystemLog {
  id              String     @id @default(cuid())
  level           LogLevel
  message         String     @db.Text
  metadata        Json?
  timestamp       DateTime   @default(now())
  
  @@index([level, timestamp])
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

model BacktestRun {
  id              String             @id @default(cuid())
  startDate       DateTime
  endDate         DateTime
  intervalMinutes Int
  enriched        Boolean            @default(true)
  useTools        Boolean            @default(true)
  status          BacktestRunStatus  @default(PENDING)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  startedAt       DateTime?
  completedAt     DateTime?
  failedAt        DateTime?
  failureReason   String?
  tradingDays     Int?
  totalTrades     Int?
  durationMs      Int?

  models          BacktestRunModel[]
  trades          Trade[]
  snapshots       PortfolioSnapshot[]
  decisions       DecisionLog[]
}

model BacktestRunModel {
  id                 String               @id @default(cuid())
  runId              String
  run                BacktestRun          @relation(fields: [runId], references: [id])
  modelId            String
  model              Model?               @relation(fields: [modelId], references: [id])
  modelName          String
  finalCash          Decimal              @db.Decimal(15, 2)
  finalPositionsValue Decimal             @db.Decimal(15, 2)
  finalTotalValue    Decimal              @db.Decimal(15, 2)
  returnPct          Decimal              @db.Decimal(10, 4)
  rank               Int?
  finalPositions     Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  snapshots          BacktestRunSnapshot[]

  @@unique([runId, modelId])
  @@index([modelId])
}

model BacktestRunSnapshot {
  id            String            @id @default(cuid())
  runModelId    String
  runModel      BacktestRunModel  @relation(fields: [runModelId], references: [id])
  date          DateTime
  totalValue    Decimal           @db.Decimal(15, 2)
  cash          Decimal?          @db.Decimal(15, 2)
  positionsValue Decimal?         @db.Decimal(15, 2)
  returnPct     Decimal?          @db.Decimal(10, 4)
  createdAt     DateTime          @default(now())

  @@index([runModelId, date])
}

enum BacktestRunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
